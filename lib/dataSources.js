const {readListAccessSchemas, nonNamespacedReadListAccessSchemas} = require('./dataSources/kubernetes/accessSchemaBuilder');

module.exports = {
  elasticsearch: require('./dataSources/elasticsearch/elasticsearch'),
  request: require('./dataSources/request/request'),
  FILE_TYPE: require('./dataSources/filetype/filetype'),
  AWS: {
    ec2: require('./dataSources/aws/ec2'),
    cloudwatch: require('./dataSources/aws/cloudwatch'),
    dynamodb: require('./dataSources/aws/dynamodb'),
    cloudwatchlogs: require('./dataSources/aws/cloudwatchlogs'),
    ecs: require('./dataSources/aws/ecs'),
    ebs: require('./dataSources/aws/ebs'),
    iam: require('./dataSources/aws/iam'),
    sqs: require('./dataSources/aws/sqs'),
    rekognition: require('./dataSources/aws/rekognition'),
    s3: require('./dataSources/aws/s3'),
    kinesis: require('./dataSources/aws/kinesis'),
    lambda: require('./dataSources/aws/lambda'),
    athena: require('./dataSources/aws/athena'),
    parameterstore: require('./dataSources/aws/parameterstore'),
    apigatewaymanagementapi: require('./dataSources/aws/apigatewaymanagementapi'),
  },
  sharp: {
    resize: require('./dataSources/sharp/resize'),
    rotate: require('./dataSources/sharp/rotate'),
  },
  google: {
    compute: require('./dataSources/google/compute'),
    kubernetes: require('./dataSources/google/kubernetes'),
    dns: require('./dataSources/google/dns'),
    iam: require('./dataSources/google/iam'),
    sql: require('./dataSources/google/sql'),
    projects: require('./dataSources/google/projects'),
    stackdriverMonitoring: require('./dataSources/google/stackdriverMonitoring'),
    stackdriverLogging: require('./dataSources/google/stackdriverLogging'),
  },
  github: require('./dataSources/github/github'),
  npm: require('./dataSources/npm/npm'),
  kubernetes: {
    pods: readListAccessSchemas('/api/v1', 'pods'),
    serviceaccounts: readListAccessSchemas('/api/v1', 'serviceaccounts'),
    secrets: readListAccessSchemas('/api/v1', 'secrets'),
    cronjobs: readListAccessSchemas('/apis/batch/v1beta1', 'cronjobs'),
    daemonsets: readListAccessSchemas('/apis/apps/v1', 'daemonsets'),
    deployments: readListAccessSchemas('/apis/apps/v1', 'deployments'),
    jobs: readListAccessSchemas('/apis/batch/v1', 'jobs'),
    replicasets: readListAccessSchemas('/apis/apps/v1', 'replicasets'),
    replicationcontrollers: readListAccessSchemas('/api/v1', 'replicationcontrollers'),
    statefulsets: readListAccessSchemas('/apis/apps/v1', 'statefulsets'),
    endpoints: readListAccessSchemas('/api/v1', 'endpoints'),
    ingresses: readListAccessSchemas('/apis/extensions/v1beta1', 'ingresses'),
    services: readListAccessSchemas('/api/v1', 'services'),
    configmaps: readListAccessSchemas('/api/v1', 'configmaps'),
    persistentvolumeclaims: readListAccessSchemas('/api/v1', 'persistentvolumeclaims'),
    events: readListAccessSchemas('/api/v1', 'events'),
    bindings: readListAccessSchemas('/api/v1', 'bindings'),
    clusterroles: nonNamespacedReadListAccessSchemas('/apis/rbac.authorization.k8s.io/v1', 'clusterroles'),
    clusterrolebindings: nonNamespacedReadListAccessSchemas('/apis/rbac.authorization.k8s.io/v1', 'clusterrolebindings'),
    namespaces: nonNamespacedReadListAccessSchemas('/api/v1', 'namespaces'),
    nodes: nonNamespacedReadListAccessSchemas('/api/v1', 'nodes'),
    persistentvolumes: nonNamespacedReadListAccessSchemas('/api/v1', 'persistentvolumes'),
    roles: readListAccessSchemas('/apis/rbac.authorization.k8s.io/v1', 'roles'),
    rolebindings: readListAccessSchemas('/apis/rbac.authorization.k8s.io/v1', 'rolebindings'),
  },
  vault: {
    secrets: require('./dataSources/vault/secrets'),
    policies: require('./dataSources/vault/policies'),
  },
  docker: require('./dataSources/docker/docker'),
};
